#### get the data
bb<-read.csv("output/percentBB_betula.csv", header=TRUE)
## make a bunch of things numeric
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$sp <- as.numeric(as.factor(bb$sp))
bb$perc <- as.numeric(bb$perc)
bb$perc <- bb$perc/100
## subsetting data, preparing genus variable, removing NAs
pp.prepdata <- subset(bb, select=c("perc", "tx", "sp")) # removed "sp" when doing just one species
pp.stan <- pp.prepdata[complete.cases(pp.prepdata),]
fit1<-stan_betareg(perc~tx+sp+tx:sp, data=pp.stan)
install.packages("betareg")
library(betareg)
fit1<-stan_betareg(perc~tx+sp+tx:sp, data=pp.stan)
fit1
View(bb)
fit1<-stan_glm(perc.bb~tx+sp+tx:sp, data=pp.stan)
## subsetting data, preparing genus variable, removing NAs
pp.prepdata <- subset(bb, select=c("perc.bb", "tx", "sp")) # removed "sp" when doing just one species
pp.stan <- pp.prepdata[complete.cases(pp.prepdata),]
fit1<-stan_glm(perc.bb~tx+sp+tx:sp, data=pp.stan)
fit1
fit1<-stan_betareg(perc~tx+sp, data=pp.stan, link="logit", link.phi="log")
## subsetting data, preparing genus variable, removing NAs
pp.prepdata <- subset(bb, select=c("perc", "tx", "sp")) # removed "sp" when doing just one species
pp.stan <- pp.prepdata[complete.cases(pp.prepdata),]
fit1<-stan_betareg(perc~tx+sp, data=pp.stan, link="logit", link.phi="log")
fit1
fit1<-stan_betareg(perc~tx+sp+tx:sp, data=pp.stan, link="logit", link.phi="log")
fit1
plot(fit1, pars=c("tx","sp"))
plot(fit1, pars=c("beta"))
# Set Working Directory
setwd("~/Documents/git/freezingexperiment/analyses")
d <-read.csv("input/Buds_clean.csv", header=TRUE, check.names=FALSE)
################ Cleaning data ##################################
# remove individuals that were frosted twice
error.inds<-d%>%dplyr::select(NEW,Freeze)
error.inds<-error.inds[!duplicated(error.inds),]
#error.inds$Freeze<-ifelse(error.inds$Freeze=="", NA, error.inds$Freeze)
#error.inds<-na.omit(error.inds)
error.inds<-as.data.frame(table(error.inds$NEW))
error.inds<-filter(error.inds, Freq!=3)
keep<-unique(error.inds$Var1)
## Clean dataframe for analysis
dx<-gather(d, key=doy, value=bbch, -NEW, -TX, -Freeze, -Bud)
dx<-filter(dx, NEW %in% keep)
dx$day<-substr(dx$doy, 1, 2)
dx$month<-substr(dx$doy, 4, 5)
dx$year<-substr(dx$doy, 7,10)
x<-paste(dx$year, dx$day, dx$month)
dx$date<-as.Date(strptime(x, format="%Y %d %m"))
dx$doy<-yday(dx$date)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(lme4)
library(arm)
library(gridExtra)
library( data.table )
library(rstan)
library(rstanarm)
# Set Working Directory
setwd("~/Documents/git/freezingexperiment/analyses")
d <-read.csv("input/Buds_clean.csv", header=TRUE, check.names=FALSE)
################ Cleaning data ##################################
# remove individuals that were frosted twice
error.inds<-d%>%dplyr::select(NEW,Freeze)
error.inds<-error.inds[!duplicated(error.inds),]
#error.inds$Freeze<-ifelse(error.inds$Freeze=="", NA, error.inds$Freeze)
#error.inds<-na.omit(error.inds)
error.inds<-as.data.frame(table(error.inds$NEW))
error.inds<-filter(error.inds, Freq!=3)
keep<-unique(error.inds$Var1)
## Clean dataframe for analysis
dx<-gather(d, key=doy, value=bbch, -NEW, -TX, -Freeze, -Bud)
dx<-filter(dx, NEW %in% keep)
dx$day<-substr(dx$doy, 1, 2)
dx$month<-substr(dx$doy, 4, 5)
dx$year<-substr(dx$doy, 7,10)
x<-paste(dx$year, dx$day, dx$month)
dx$date<-as.Date(strptime(x, format="%Y %d %m"))
dx$doy<-yday(dx$date)
### DOY should now be adjusted for start of experiment rather than actual calendar doy
# Start of Experiment was: 24 March 2017
start<-yday("2017/03/24")
dx$doy.adjusted<-dx$doy-start
dx$bud <- ave(dx$Bud, dx$NEW, dx$date, FUN = seq_along)
# Quick check...
dvr<-dx[!is.na(dx$bbch),]
done<-c("DONE!", "DONE", "DONE!!", "missed","(missed)", "")
dvr<-dvr[!dvr$bbch%in%done,]
dead<-c("stem snapped", "x", "dead")
dvr$bbch<-ifelse(dvr$bbch%in%dead, 0, dvr$bbch)
dvr$bud<-as.numeric(dvr$bud)
dvr$ID<-paste(dvr$NEW, dvr$bud, sep="_")
dvr<-dvr%>%dplyr::select(ID, doy.adjusted, bbch)
last<-aggregate(dvr$doy.adjusted, by = list(dvr$ID), max)
last<-last%>%rename(ID=Group.1)%>%rename(doy.adjusted=x)
last$leaf<-NA
for(i in c(1:nrow(last))) {
for(j in c(1:nrow(dvr)))
if(last$ID[i]==dvr$ID[j] & last$doy.adjusted[i]==dvr$doy.adjusted[j])
last$leaf[i]<-dvr$bbch[j]
}
first<-aggregate(dvr$doy.adjusted, by = list(dvr$ID), min)
first<-first%>%rename(ID=Group.1)%>%rename(doy.adjusted=x)
first$bb<-NA
for(i in c(1:nrow(first))) {
for(j in c(1:nrow(dvr)))
if(first$ID[i]==dvr$ID[j] & first$doy.adjusted[i]==dvr$doy.adjusted[j])
first$bb[i]<-dvr$bbch[j]
}
first<-first%>%rename(budburst=doy.adjusted)%>%rename(bbch.first=bb)
last<-last%>%rename(leafout=doy.adjusted)%>%rename(bbch.last=leaf)
risk<-full_join(first, last)
risk$species<-substr(risk$ID, 1,6)
risk$individ<-substr(risk$ID, 1, 10)
risk$bud<-substr(risk$ID, 12, 13)
View(risk)
risk$burst<-ifelse(risk$bbch.last>=15, 1, 0)
View(risk)
###### Re-evaluated % budburst #######
burst<-risk[!is.na(risk$dvr),]
burst<-distinct(burst, ID,individ)
burst<-as.data.frame(table(burst$individ))
burst<-burst%>%rename(individ=Var1)%>%rename(burst=Freq)
burst$individ<-as.character(burst$individ)
total<-risk
total<-distinct(total, ID,individ)
total<-as.data.frame(table(total$individ))
total<-total%>%rename(individ=Var1)%>%rename(total=Freq)
total$individ<-as.character(total$individ)
percent<-full_join(total, burst)
View(percent)
###### Re-evaluated % budburst #######
burst<-risk[!is.na(risk$dvr),]
risk$total<-ave(risk$individ, FUN=length)
View(risk)
risk$total<-ave(risk$bud,risk$individ, FUN=length)
View(risk)
risk$total<-ave(risk$bud,risk$individ, FUN=sum)
risk$total<-ave(risk$burst,risk$individ, FUN=sum)
View(risk)
risk$total<-ave(risk$bud,risk$individ, FUN=length)
risk$burst.perc<-ave(risk$burst,risk$individ, FUN=sum)
View(risk)
risk$perc<-risk$burst.perc/risk$total
risk$total<-as.numeric(risk$total)
risk$burst.perc<-as.numeric(risk$burst.perc)
risk$perc<-risk$burst.perc/risk$total
View(risk)
View(d)
tx<-d%>%dplyr::select(NEW, TX)%>%rename(tx==TX)
tx<-d%>%dplyr::select(NEW, TX)%>%dplyr::rename(tx==TX)
tx<-d%>%dplyr::select(NEW, TX)%>%dplyr::rename(TX==tx)
tx<-d%>%dplyr::select(NEW, TX)%>%dplyr::rename(TX=tx)
tx<-d%>%dplyr::select(NEW, TX)%>%dplyr::rename(tx=TX)
View(tx)
risk<-cbind(risk, tx)
tx<-d%>%dplyr::select(NEW, TX)%>%dplyr::rename(tx=TX)%>%filter(NEW%in%keep)
tx<-tx[!duplicated(tx),]
tx<-d%>%dplyr::select(NEW, TX)%>%dplyr::rename(tx=TX)%>%filter(NEW%in%keep)
View(tx)
tx<-tx[!duplicated(tx),]
risk$tx<-NA
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(tx))){
if(risk$individ[i]==tx$NEW[j])
risk$tx[i]<-tx$tx[j]
}
}
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(tx))){
risk$tx<-ifelse(risk$individ[i]==tx$NEW[j], tx$tx[j], risk$tx[i])
}
}
View(risk)
risk$tx<-NA
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(tx))){
risk$tx[i]<-ifelse(risk$individ[i]==tx$NEW[j], tx$tx[j], risk$tx[i])
}
}
View(risk)
View(dx)
View(first)
View(last)
risk<-full_join(first, last)
risk$species<-substr(risk$ID, 1,6)
risk$individ<-substr(risk$ID, 1, 10)
risk$bud<-substr(risk$ID, 12, 13)
View(risk)
tx<-d%>%dplyr::select(NEW, TX)%>%dplyr::rename(tx=TX)%>%filter(NEW%in%keep)
tx<-tx[!duplicated(tx),]
risk$tx<-NA
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(tx))){
risk$tx[i]<-ifelse(risk$individ[i]==tx$NEW[j], tx$tx[j], risk$tx[i])
}
}
View(risk)
tx<-d%>%dplyr::select(NEW, TX)%>%filter(NEW%in%keep)
tx<-tx[!duplicated(tx),]
risk$tx<-NA
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(tx))){
risk$tx[i]<-ifelse(risk$individ[i]==tx$NEW[j], tx$TX[j], risk$tx[i])
}
}
View(risk)
risk$tx<-NA
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(tx)))
if(risk$individ[i]==tx$NEW[j])
risk$tx[i]<-tx$TX[j]
}
risk$tx<-NA
for(i in c(1:nrow(risk))){
for(j in c(i:nrow(tx))){
risk$tx[i]<-ifelse(risk$individ[i]==tx$NEW[j], tx$TX[j], risk$tx[i])
}
}
risk$tx<-ifelse(risk$individ==tx$NEW, tx$TX, risk$tx)
View(risk)
risk.tx<-risk%>%dplyr::select(individ, tx)
risk.tx<-risk.tx[!duplicated(risk.tx),]
View(risk.tx)
risk<-full_join(first, last)
risk$species<-substr(risk$ID, 1,6)
risk$individ<-substr(risk$ID, 1, 10)
risk$bud<-substr(risk$ID, 12, 13)
tx<-d%>%dplyr::select(NEW, TX)%>%filter(NEW%in%keep)
tx<-tx[!duplicated(tx),]
risk.tx<-risk%>%dplyr::select(individ, tx)
risk.tx<-risk.tx[!duplicated(risk.tx),]
risk<-full_join(first, last)
risk$species<-substr(risk$ID, 1,6)
risk$individ<-substr(risk$ID, 1, 10)
risk$bud<-substr(risk$ID, 12, 13)
tx<-d%>%dplyr::select(NEW, TX)%>%filter(NEW%in%keep)
tx<-tx[!duplicated(tx),]
risk.tx<-risk%>%dplyr::select(individ)
risk.tx<-risk.tx[!duplicated(risk.tx),]
risk.tx<-risk%>%dplyr::select(individ)
risk<-full_join(first, last)
risk$species<-substr(risk$ID, 1,6)
risk$individ<-substr(risk$ID, 1, 10)
risk$bud<-substr(risk$ID, 12, 13)
tx<-d%>%dplyr::select(NEW, TX)%>%filter(NEW%in%keep)
tx<-tx[!duplicated(tx),]
View(total)
View(tx)
risk<-inner_join(risk, tx)
tx<-d%>%dplyr::select(NEW, TX)%>%rename(individ=NEW)%>%filter(NEW%in%keep)
tx<-d%>%dplyr::select(NEW, TX)%>%rename(NEW=individ)%>%filter(NEW%in%keep)
risk<-full_join(first, last)
risk$species<-substr(risk$ID, 1,6)
risk$individ<-substr(risk$ID, 1, 10)
risk$bud<-substr(risk$ID, 12, 13)
tx<-d%>%dplyr::select(NEW, TX)%>%rename(NEW=individ)%>%filter(NEW%in%keep)
tx<-d%>%dplyr::select(NEW, TX)%>%dplyr::rename(NEW=individ)%>%filter(NEW%in%keep)
tx<-d%>%dplyr::select(NEW, TX)%>%filter(NEW%in%keep)%>%rename(NEW=individ)
tx<-d%>%dplyr::select(NEW, TX)%>%filter(NEW%in%keep)
tx<-tx[!duplicated(tx),]
tx<-rename(tx, NEW=individ)
tx<-dplyr::rename(tx, NEW=individ)
tx<-dplyr::rename(tx, individ=NEW)
tx<-d%>%dplyr::select(NEW, TX)%>%filter(NEW%in%keep)%>%rename(tx, individ=NEW)
tx<-tx[!duplicated(tx),]
risk<-inner_join(risk, tx)
View(risk)
risk$burst<-ifelse(risk$bbch.last>=15, 1, 0)
risk$total<-ave(risk$bud,risk$individ, FUN=length)
risk$total<-as.numeric(risk$total)
risk$burst.perc<-ave(risk$burst,risk$individ, FUN=sum)
risk$burst.perc<-as.numeric(risk$burst.perc)
risk$perc<-risk$burst.perc/risk$total
View(risk)
write.csv(risk, file="~/Documents/git/freezingexperiment/output/perc_clean.csv", row.names = FALSE)
write.csv(risk, file="~/Documents/git/freezingexperiment/analyses/output/perc_clean.csv", row.names = FALSE)
bb<-read.csv("output/perc_clean.csv", header=TRUE)
## make a bunch of things numeric
bb$tx<-ifelse(bb$tx=="A", 0, 1)
View(bb)
## make a bunch of things numeric
bb$tx<-ifelse(bb$TX=="A", 0, 1)
bb$sp <- as.numeric(as.factor(bb$sp))
bb$perc <- as.numeric(bb$perc)
## subsetting data, preparing genus variable, removing NAs
pp.prepdata <- subset(bb, select=c("perc", "tx", "sp")) # removed "sp" when doing just one species
pp.stan <- pp.prepdata[complete.cases(pp.prepdata),]
fit1<-stan_betareg(perc~tx+sp+tx:sp, data=pp.stan, link="logit", link.phi="log")
View(bb)
View(pp.stan)
bb$sp[bb$sp==1] <- 0
bb$sp[bb$sp==2] <- 1
## subsetting data, preparing genus variable, removing NAs
pp.prepdata <- subset(bb, select=c("perc", "tx", "sp")) # removed "sp" when doing just one species
pp.stan <- pp.prepdata[complete.cases(pp.prepdata),]
fit1<-stan_betareg(perc~tx+sp+tx:sp, data=pp.stan, link="logit", link.phi="log")
View(pp.stan)
## make a bunch of things numeric
bb<-filter(bb, sp!="SAMRAC")
bb<-read.csv("output/perc_clean.csv", header=TRUE)
## make a bunch of things numeric
bb<-filter(bb, sp!="SAMRAC")
bb$tx<-ifelse(bb$TX=="A", 0, 1)
bb$sp <- as.numeric(as.factor(bb$sp))
bb<-read.csv("output/perc_clean.csv", header=TRUE)
## make a bunch of things numeric
bb<-filter(bb, species!="SAMRAC")
bb$tx<-ifelse(bb$TX=="A", 0, 1)
bb$sp <- as.numeric(as.factor(bb$sp))
bb$sp[bb$sp==1] <- 0
bb$sp[bb$sp==2] <- 1
bb$perc <- as.numeric(bb$perc)
## subsetting data, preparing genus variable, removing NAs
pp.prepdata <- subset(bb, select=c("perc", "tx", "sp")) # removed "sp" when doing just one species
pp.stan <- pp.prepdata[complete.cases(pp.prepdata),]
fit1<-stan_betareg(perc~tx+sp+tx:sp, data=pp.stan, link="logit", link.phi="log")
fit1
plot(fit1, pars=c("beta"))
pp_check(fit1)
prior_summary(fit1)
install.packages("swirl")
library(swirl)
swirl()
5+7
main()
main()
swirl()
main()
0
info()
main()
Sys.Date()
mean(c(2,4,5))
main()
attach(iris)
head(iris)
glm(Sepal.Length~Petal.Length, data=iris)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Set Working Directory
setwd("~/Documents/git/treespotters")
d<-read.csv("treespotters/individual_phenometrics_data.csv",header=TRUE)
head(d)
df<-dplyr::select(d, ObservedBy_Person_ID, First_Yes_Year)
df<-filter(df, First_Yes_Year>2016)
View(df)
length(unique(df$ObservedBy_Person_ID))
dx<-df %>%
mutate(ObservedBy_Person_ID = strsplit(as.character(ObservedBy_Person_ID), ",")) %>%
unnest(ObservedBy_Person_ID)
View(dx)
dx[] <- lapply(dx, gsub, pattern=''', replacement='')
dx[] <- lapply(dx, gsub, pattern="'", replacement="")
View(dx)
dx<-dx[!duplicated(dx),]
length(unique(dx$ObservedBy_Person_ID))
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
library(dplyr)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/freezingexperiment/analyses/")
source('scripts/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
bb<-read.csv("output/buds_traits.csv", header=TRUE)
View(bb)
## make a bunch of things numeric
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$sp <- as.numeric(as.factor(bb$sp))
bb$dvr <- as.numeric(bb$dvr)
bb$ind<-substr(bb$individ, 9,10)
cl<-bb%>%dplyr::select(ID, species, individ, tx, chlorophyll)
cl<-cl[!is.na(cl$chlorophyll),]
cl$chloro<-ave(cl$chlorophyll, cl$individ)
cl$tx<-ifelse(cl$tx=="A", 0, 1)
View(cl)
mod1<-stan_glmer(chloro~tx+species+tx:species+(1|individ), data=cl)
mod1
plot(mod1, pars="beta")
bb<-read.csv("output/buds_traits.csv", header=TRUE)
cl<-bb%>%dplyr::select(ID, species, individ, tx, chlorophyll)
cl<-cl[!is.na(cl$chlorophyll),]
cl$chloro<-ave(cl$chlorophyll, cl$individ)
cl$tx<-ifelse(cl$tx=="A", 0, 1)
mod1<-stan_glmer(chloro~tx+species+tx:species+(1|individ), data=cl)
mod1
plot(mod1, pars="beta")
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/freezingexperiment/analyses/")
source('stan/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# make sure this is the correct file (we're still cleaning as I write this!)
bb <- read.csv("output/birches_buddata.csv", header=TRUE)
bb <- subset(bb, bb$species=="BETPOP")
## make a bunch of things numeric
bb$tx <- as.numeric(bb$frost)
bb$bud <- as.numeric(bb$bud)
bb$resp <- as.numeric(bb$dvr)
## subsetting data, preparing genus variable, removing NAs
ospr.prepdata <- subset(bb, select=c("resp", "tx", "bud", "individ"))
dim(subset(bb, is.na(tx)==FALSE & is.na(bud)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
## remove NAs individually .... (not needed currently)
#ospr.stan$bud<-ospr.stan[which(is.na(ospr.stan$bud)==FALSE),]
#ospr.stan$tx<-ospr.stan[which(is.na(ospr.stan$tx)==FALSE),]
ospr.stan$individ <- as.numeric(as.factor(ospr.stan$individ))
rm(list=ls())
options(stringsAsFactors = FALSE)
# dostan = TRUE
library(rstan)
#install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(ggplot2)
library(shinystan)
library(bayesplot)
library(rstanarm)
library(dplyr)
# Setting working directory. Add in your own path in an if statement for your file structure
setwd("~/Documents/git/freezingexperiment/analyses/")
source('scripts/savestan.R')
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
bb<-read.csv("output/birches_clean.csv", header=TRUE)
## make a bunch of things numeric
bb$tx<-ifelse(bb$tx=="A", 0, 1)
bb$sp <- as.numeric(as.factor(bb$sp))
bb$dvr <- as.numeric(bb$dvr)
bb$ind<-substr(bb$individ, 9,10)
## subsetting data, preparing genus variable, removing NAs
dvr.prepdata <- subset(bb, select=c("dvr", "tx", "ind", "sp")) # removed "sp" when doing just one species
dvr.stan <- dvr.prepdata[complete.cases(dvr.prepdata),]
dvr.stan$ind <- as.numeric(as.factor(dvr.stan$ind))
fit1<-stan_glmer(dvr~tx+sp+tx:sp+(1|ind), data=dvr.stan)
fit1
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Set Working directory
setwd("~/Documents/git/fieldfreezing")
d<-read.csv("Exp_taggedHF.csv", header=TRUE)
d$species<-substr(d$ind, 3,8)
d$number<-substr(d$ind, 12, 13)
d$stage<-substr(d$ind, 0,1)
d$sp_stage<-substr(d$ind, 0,8)
count<-as.data.frame(table(d$sp_stage))
count<-count%>%
rename(ind=Var1)%>%
rename(number=Freq)
d<-d[!duplicated(d$ind), ]
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Set Working directory
setwd("~/Documents/git/fieldfreezing/analyses")
d<-read.csv("input/Exp_taggedHF.csv", header=TRUE)
d$species<-substr(d$ind, 3,8)
d$number<-substr(d$ind, 12, 13)
d$stage<-substr(d$ind, 0,1)
d$sp_stage<-substr(d$ind, 0,8)
count<-as.data.frame(table(d$sp_stage))
count<-count%>%
rename(ind=Var1)%>%
rename(number=Freq)
d<-d[!duplicated(d$ind), ]
View(d)
View(d)
View(count)
2016-1984
1983-1950
